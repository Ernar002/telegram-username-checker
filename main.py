import asyncio
from telethon import TelegramClient, errors
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message

# –í—Å—Ç–∞–≤—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
BOT_TOKEN = "YOU_BOT_TOKEN"
API_ID = "YOU_API_ID"
API_HASH = "YOU_API_HASH"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞ Telethon
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
client = TelegramClient('checker', API_ID, API_HASH)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ username
async def check_username(username):
    try:
        await client.get_entity(username)
        return f"‚ùå Username @{username} –∑–∞–Ω—è—Ç."
    except errors.UsernameInvalidError:
        return f"‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç username: @{username}"
    except ValueError:
        return f"‚úÖ Username @{username} –¥–æ—Å—Ç—É–ø–µ–Ω!"
    except errors.RPCError as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ @{username}: {e}"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ username –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å username
@dp.message()
async def handle_message(message: Message):
    usernames = message.text.split()
    if not usernames:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω username.")
        return

    results = []
    async with client:
        for username in usernames:
            username = username.lstrip("@")
            result = await check_username(username)
            results.append(result)

    await message.answer("\n".join(results))

# –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await client.start()
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
